//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/Scripts/Runtime/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""5963d34a-d515-4118-b82f-c6cf6716f7c5"",
            ""actions"": [
                {
                    ""name"": ""Open/Close Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""655077d9-9f6f-4fb6-ae32-9ee71b36830f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close CraftStation"",
                    ""type"": ""Button"",
                    ""id"": ""f7784f0c-d9e2-4d52-aa57-657ebc0d9b02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close Debug"",
                    ""type"": ""Button"",
                    ""id"": ""cd756934-79c3-4343-a819-041ee4c4c4e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close Furnace"",
                    ""type"": ""Button"",
                    ""id"": ""8aafca71-42ca-44b0-9828-8b9d5205687d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""800385ea-f5e5-488f-8e75-549599faee90"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""760f1a87-b54d-49ad-a1ab-0d5b58e7c30f"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea847178-20be-4141-9159-3297d67b68ae"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close CraftStation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2a5717e-b464-4c41-adda-78eea965faca"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Furnace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_OpenCloseInventory = m_UI.FindAction("Open/Close Inventory", throwIfNotFound: true);
        m_UI_OpenCloseCraftStation = m_UI.FindAction("Open/Close CraftStation", throwIfNotFound: true);
        m_UI_OpenCloseDebug = m_UI.FindAction("Open/Close Debug", throwIfNotFound: true);
        m_UI_OpenCloseFurnace = m_UI.FindAction("Open/Close Furnace", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_OpenCloseInventory;
    private readonly InputAction m_UI_OpenCloseCraftStation;
    private readonly InputAction m_UI_OpenCloseDebug;
    private readonly InputAction m_UI_OpenCloseFurnace;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseInventory => m_Wrapper.m_UI_OpenCloseInventory;
        public InputAction @OpenCloseCraftStation => m_Wrapper.m_UI_OpenCloseCraftStation;
        public InputAction @OpenCloseDebug => m_Wrapper.m_UI_OpenCloseDebug;
        public InputAction @OpenCloseFurnace => m_Wrapper.m_UI_OpenCloseFurnace;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @OpenCloseInventory.started += instance.OnOpenCloseInventory;
            @OpenCloseInventory.performed += instance.OnOpenCloseInventory;
            @OpenCloseInventory.canceled += instance.OnOpenCloseInventory;
            @OpenCloseCraftStation.started += instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.performed += instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.canceled += instance.OnOpenCloseCraftStation;
            @OpenCloseDebug.started += instance.OnOpenCloseDebug;
            @OpenCloseDebug.performed += instance.OnOpenCloseDebug;
            @OpenCloseDebug.canceled += instance.OnOpenCloseDebug;
            @OpenCloseFurnace.started += instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.performed += instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.canceled += instance.OnOpenCloseFurnace;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @OpenCloseInventory.started -= instance.OnOpenCloseInventory;
            @OpenCloseInventory.performed -= instance.OnOpenCloseInventory;
            @OpenCloseInventory.canceled -= instance.OnOpenCloseInventory;
            @OpenCloseCraftStation.started -= instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.performed -= instance.OnOpenCloseCraftStation;
            @OpenCloseCraftStation.canceled -= instance.OnOpenCloseCraftStation;
            @OpenCloseDebug.started -= instance.OnOpenCloseDebug;
            @OpenCloseDebug.performed -= instance.OnOpenCloseDebug;
            @OpenCloseDebug.canceled -= instance.OnOpenCloseDebug;
            @OpenCloseFurnace.started -= instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.performed -= instance.OnOpenCloseFurnace;
            @OpenCloseFurnace.canceled -= instance.OnOpenCloseFurnace;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IUIActions
    {
        void OnOpenCloseInventory(InputAction.CallbackContext context);
        void OnOpenCloseCraftStation(InputAction.CallbackContext context);
        void OnOpenCloseDebug(InputAction.CallbackContext context);
        void OnOpenCloseFurnace(InputAction.CallbackContext context);
    }
}
