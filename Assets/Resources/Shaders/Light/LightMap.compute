#pragma kernel FillLightBrightness
#pragma kernel FillLightColored
#pragma kernel SpreadLightBrightness
#pragma kernel SpreadLightColored
#pragma kernel ApplyLightBrightness
#pragma kernel ApplyLightColored

struct WorldCellData
{
    float bgLightValue;
    float blockLightValue;
    uint bgLightColor;
    uint blockLightColor;
    int flags;
};

int _width;
int _height;

float _dayLightValue;

int _spreadDirection;
int _spreadStartLoop;
int _spreadEndLoop;

StructuredBuffer<WorldCellData> _worldData;
RWStructuredBuffer<float> _brightness;
RWStructuredBuffer<float4> _colors;
RWTexture2D<float4> _texture;

//Fill light region
float4 ParseColor(uint color)
{
    float r = ((color & 0x000000FF)) / 255.0;
    float g = ((color & 0x0000FF00) >> 8) / 255.0;
    float b = ((color & 0x00FF0000) >> 16) / 255.0;
    float a = 1;
    return float4(r, g, b, a);
}

[numthreads(250, 1, 1)]
void FillLightBrightness(uint3 id : SV_DispatchThreadID)
{
    float bgLightValue = _worldData[id.x + id.y].bgLightValue;
    float blockLightValue = _worldData[id.x + id.y].blockLightValue;
    int isSolid = _worldData[id.x + id.y].flags & 1;
    int isFullLiquidBlock = _worldData[id.x + id.y].flags & 2;
    int isDayLightBlock = _worldData[id.x + id.y].flags & 4;
    
    if (isSolid != 0 || isFullLiquidBlock != 0)
    {
        _brightness[id.x + id.y] = blockLightValue;
    }
    else if (isDayLightBlock != 0)
    {
        bgLightValue = lerp(0, 1, _dayLightValue);
        if (bgLightValue >= blockLightValue)
        {
            _brightness[id.x + id.y] = bgLightValue;
        }
        else
        {
            _brightness[id.x + id.y] = blockLightValue;
        }
    }
    else
    {
        if (bgLightValue > blockLightValue)
        {
            _brightness[id.x + id.y] = bgLightValue;
        }
        else
        {
            _brightness[id.x + id.y] = blockLightValue;
        }
    }
}

[numthreads(250, 1, 1)]
void FillLightColored(uint3 id : SV_DispatchThreadID)
{
    float4 blLightColor = ParseColor(_worldData[id.x + id.y].bgLightColor);
    float4 blockLightColor = ParseColor(_worldData[id.x + id.y].blockLightColor);
    float4 color;
    int isSolid = _worldData[id.x + id.y].flags & 1;
    int isFullLiquidBlock = _worldData[id.x + id.y].flags & 2;
    int isDayLightBlock = _worldData[id.x + id.y].flags & 4;

    if (isSolid != 0 || isFullLiquidBlock != 0)
    {
        _colors[id.x + id.y] = blockLightColor;
    }
    else if (isDayLightBlock != 0)
    {
        blLightColor = lerp(float4(0, 0, 0, 0), float4(1, 1, 1, 1), _dayLightValue);
        color = blLightColor + blockLightColor;
        if (color.r > 1)
        {
            color.r = 1;
        }
        if (color.g > 1)
        {
            color.g = 1;
        }
        if (color.b > 1)
        {
            color.b = 1;
        }
        _colors[id.x + id.y] = color;
    }
    else
    {
        color = blockLightColor;
        if (blLightColor.r > color.r)
        {
            color.r = blLightColor.r;
        }
        if (blLightColor.g > color.g)
        {
            color.g = blLightColor.g;
        }
        if (blLightColor.b > color.b)
        {
            color.b = blLightColor.b;
        }
        _colors[id.x + id.y] = color;
    }
}

//LightSpread region
float IntensitySpreadBrightness(int index, float value)
{
    int isSolid = _worldData[index].flags & 1;
    int isFullLiquidBlock = _worldData[index].flags & 2;
    
    if (isSolid != 0)
    {
        return value * 0.6;
    }
    else if (isFullLiquidBlock != 0)
    {
        return value * 0.8;
    }
    else
    {
        return value * 0.9;
    }

}

float4 IntensitySpreadColor(int index, float4 value)
{
    int isSolid = _worldData[index].flags & 1;
    int isFullLiquidBlock = _worldData[index].flags & 2;
    
    if (isSolid != 0)
    {
        return value * 0.6;
    }
    else if (isFullLiquidBlock != 0)
    {
        return value * 0.8;
    }
    else
    {
        return value * 0.9;
    }

}

[numthreads(50, 1, 1)]
void SpreadLightBrightness(uint3 id : SV_DispatchThreadID)
{
    int moveIndex;
    int nextMoveIndex;
    int adder;
    float newLightValue;
    
    for (int i = _spreadStartLoop;; i += adder)
    {
        switch (_spreadDirection)
        {
            //If we spread from top to bottom
            case 0:
                {
                    moveIndex = id.x + i * _width;
                    nextMoveIndex = id.x + (i - 1) * _width;
                    adder = -1;
                }
                break;
            //If we spread from bottom to top
            case 1:
                {
                    moveIndex = id.x + i * _width;
                    nextMoveIndex = id.x + (i + 1) * _width;
                    adder = 1;
                }
                break;
            //If we spread from left to right
            case 2:
                {
                    moveIndex = id.x * _width + i;
                    nextMoveIndex = id.x * _width + i + 1;
                    adder = 1;
                }
                break;
            //If we spread from right to left
            case 3:
                {
                    moveIndex = id.x * _width + i;
                    nextMoveIndex = id.x * _width + i - 1;
                    adder = -1;
                }
                break;
            default:
                {
                    moveIndex = 0;
                    nextMoveIndex = 0;
                    adder = 0;
                }
                break;
        }
        
        newLightValue = IntensitySpreadBrightness(nextMoveIndex, _brightness[moveIndex]);
        
        if (newLightValue <= 0.05f)
        {
            newLightValue = 0;
        }

        if (newLightValue > _brightness[nextMoveIndex])
        {
            _brightness[nextMoveIndex] = newLightValue;
        }
        
        if (i + adder == _spreadEndLoop)
        {
            break;
        }
    }
}

[numthreads(50, 1, 1)]
void SpreadLightColored(uint3 id : SV_DispatchThreadID)
{
    int moveIndex;
    int nextMoveIndex;
    int adder;
    float4 newLightColor;
    float4 color;
    
    for (int i = _spreadStartLoop;; i += adder)
    {
        switch (_spreadDirection)
        {
            //If we spread from top to bottom
            case 0:
                {
                    moveIndex = id.x + i * _width;
                    nextMoveIndex = id.x + (i - 1) * _width;
                    adder = -1;
                }
                break;
            //If we spread from bottom to top
            case 1:
                {
                    moveIndex = id.x + i * _width;
                    nextMoveIndex = id.x + (i + 1) * _width;
                    adder = 1;
                }
                break;
            //If we spread from left to right
            case 2:
                {
                    moveIndex = id.x * _width + i;
                    nextMoveIndex = id.x * _width + i + 1;
                    adder = 1;
                }
                break;
            //If we spread from right to left
            case 3:
                {
                    moveIndex = id.x * _width + i;
                    nextMoveIndex = id.x * _width + i - 1;
                    adder = -1;
                }
                break;
            default:
                {
                    moveIndex = 0;
                    nextMoveIndex = 0;
                    adder = 0;
                }
                break;
        }
        
        newLightColor = IntensitySpreadColor(nextMoveIndex, _colors[moveIndex]);
        color = _colors[nextMoveIndex];
        
        if (newLightColor.r < 0.05)
        {
            newLightColor.r = 0;
        }
        if (newLightColor.g < 0.05)
        {
            newLightColor.g = 0;
        }
        if (newLightColor.b < 0.05)
        {
            newLightColor.b = 0;
        }

        if (newLightColor.r > color.r)
        {
            color.r = newLightColor.r;
        }
        if (newLightColor.g > color.g)
        {
            color.g = newLightColor.g;
        }
        if (newLightColor.b > color.b)
        {
            color.b = newLightColor.b;
        }
        
        _colors[nextMoveIndex] = color;
        
        if (i + adder == _spreadEndLoop)
        {
            break;
        }
    }
}

//LightApply region
[numthreads(30, 20, 1)]
void ApplyLightBrightness(uint3 id : SV_DispatchThreadID)
{
    _texture[id.xy] = float4(1, 1, 1, 1) * _brightness[id.x + id.y * _width];
}

[numthreads(30, 20, 1)]
void ApplyLightColored(uint3 id : SV_DispatchThreadID)
{
    _texture[id.xy] = _colors[id.x + id.y * _width];
}
